package com.jasper.pilot.handler;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.buffer.DefaultDataBufferFactory;
import org.springframework.data.mongodb.core.ReactiveMongoTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.jasper.pilot.projection.UserData;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class JasperHandler {

	@Autowired
	ReactiveMongoTemplate reactiveMongoTemplate;

	final DefaultDataBufferFactory bufferFactory = new DefaultDataBufferFactory();

	public Mono<ServerResponse> data(ServerRequest request) {
		Flux<UserData> user = reactiveMongoTemplate.findAll(UserData.class);
		return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(user, UserData.class);
	}

	public Mono<ServerResponse> generateReport(ServerRequest request) {
		Mono<List<UserData>> users = reactiveMongoTemplate.findAll(UserData.class).collectList();
		
		int fromYear = Integer.parseInt(request.queryParam("fromYear").orElse(""));
		int toYear = Integer.parseInt(request.queryParam("toYear").orElse(""));
		
//		try {
//			InputStream reportInputStream = getClass().getResourceAsStream("/jrxmlTemplates/Sample.jrxml");
//			JasperReport jasperReport = JasperCompileManager.compileReport(reportInputStream);
//			
//			JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(users.collectList().block());
//			
//			Map<String,Object> parameters = new HashMap<>();
//			parameters.put("fromYear", fromYear);
//			parameters.put("toYear", toYear);
////			parameters.put("dataSource", dataSource);
//			
//			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, dataSource);
//			
//			FileOutputStream pdfFileOutputStream = new FileOutputStream("/generatedReports/UserDetails.pdf");
//			JasperExportManager.exportReportToPdfStream(jasperPrint,pdfFileOutputStream);
//			
//			pdfFileOutputStream.close();
//			reportInputStream.close();
//	
//			FileSystemResource resource = new FileSystemResource("/generatedReports/UserDetails.pdf");
//			
//			return ServerResponse.ok().contentType(MediaType.APPLICATION_PDF).body(BodyInserters.fromResource(resource));
//		} 
		try {
	        InputStream reportInputStream = getClass().getResourceAsStream("/jrxmlTemplates/Sample.jrxml");
	        JasperReport jasperReport = JasperCompileManager.compileReport(reportInputStream);
	        
	        return users.flatMap(user -> {
	            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(user);
	            
	            Map<String,Object> parameters = new HashMap<>();
	            parameters.put("fromYear", fromYear);
	            parameters.put("toYear", toYear);
	            
	            JasperPrint jasperPrint = null;
				try {
					jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, dataSource);
				} catch (JRException e) {
					e.printStackTrace();
				}
	            
	            try {
	            	FileOutputStream pdfFileOutputStream = new FileOutputStream("/generatedReports/UserDetails.pdf");
	                JasperExportManager.exportReportToPdfStream(jasperPrint, pdfFileOutputStream);
	                
	                FileSystemResource resource = new FileSystemResource("/generatedReports/UserDetails.pdf");
	                
	                return ServerResponse.ok()
	                    .contentType(MediaType.APPLICATION_PDF)
	                    .body(BodyInserters.fromResource(resource)
	                    );
	            } catch (Exception e) {
	                e.printStackTrace();
	                return ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	            }
	        });
	    } catch(Exception e) {
	    	e.printStackTrace();
	    	return ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	    }
	}
}
